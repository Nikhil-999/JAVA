IMP NOTE::
    In Java args contains the supplied command-line arguments 
    as an array of String objects.
    The reason for this is to configure your application to run
     a particular way or provide it with some piece of information it needs.

    --> Class name generally start with capital letter.

TOKENS:
    Keywords , Identifiers , Constants , Special Symbols , Operators

CASTING:
 AUtomatic casting is implicit casting      (Putting small box in Big box)
 Manual casting is explicit casting         (Putting big box in small box)

 STATIC:
    Whenever we want to access something within the class without creating the object
    then u need to create it as static (example create a function as static so that it
    can be accessed without creating the object of that class.)

REFERENCE TYPE: 
    --> String s = new String("hello world");
    Also Reference type always start with capital letter and primitive data type with small letter.
    

IMPORT AND PACKAGES:
    --> Any class came from java.lang package doesnt need to be included in main class file.
    --> importing class is also important becoz if there are 2 class with same name but from different packages
        then one class can be imported and other class can be directly used, without writing import statement,
        example :-  """java.sql.Date""" and """java.util.Date"""

ARRAYS:
    By default arrays are initialized with '0' number.

for arrays to find length use:      arr.length;   OR    char.length;
AND
for String to find length use:      str.length();



    <------------------------------------   OOPS     ------------------------------------->

The motive behind a default constructor.
    * Create the Object
    * Call the super class constructor()
    * Initialize all the instance variables of the class object.

--> Attributes are also called fields.

--> we created a static method, which means that it can be accessed without creating an object
of the class, unlike public, which can only be accessed by objects


***     MODIFIERS   ***

Modifiers are divied into two groups:
    Access Modifiers - controls the access level
    Non-Access Modifiers - do not control access level, but provides other functionality


        <---------- Access Modifier ---------->
#######     For classes, we can use either public or default :     #######
public : The class is accessible by any other class.
default : The class is only accessible by classes in the same package. 
            This is used when you don't specify a modifier.

#######  For attributes, methods and constructors, we can use the one of the following ::  ########
public : The code is accessible for all classes.
private : The code is only accessible within the declared class.
default : The code is only accessible in the same package. This is used when you don't specify a modifier.
protected : The code is accessible in the same package and subclasses.


        <--------- Non Access Modifier ----------->