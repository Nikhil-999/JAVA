IMP NOTE::
    In Java args contains the supplied command-line arguments 
    as an array of String objects.
    The reason for this is to configure your application to run
     a particular way or provide it with some piece of information it needs.

    --> Class name generally start with capital letter.

TOKENS:
    Keywords , Identifiers , Constants , Special Symbols , Operators

CASTING:
 AUtomatic casting is implicit casting      (Putting small box in Big box)
 Manual casting is explicit casting         (Putting big box in small box)

 STATIC:
    Whenever we want to access something within the class without creating the object
    then u need to create it as static (example create a function as static so that it
    can be accessed without creating the object of that class.)

REFERENCE TYPE: 
    --> String s = new String("hello world");
    Also Reference type always start with capital letter and primitive data type with small letter.
    

IMPORT AND PACKAGES:
    --> Any class came from java.lang package doesnt need to be included in main class file.
    --> importing class is also important becoz if there are 2 class with same name but from different packages
        then one class can be imported and other class can be directly used, without writing import statement,
        example :-  """java.sql.Date""" and """java.util.Date"""

ARRAYS:
    By default arrays are initialized with '0' number.

for arrays to find length use:      arr.length;   OR    char.length;
AND
for String to find length use:      str.length();



    <------------------------------------   OOPS     ------------------------------------->

The motive behind a default constructor.
    * Create the Object
    * Call the super class constructor()
    * Initialize all the instance variables of the class object.

--> Attributes are also called fields.

--> we created a static method, which means that it can be accessed without creating an object
of the class, unlike public, which can only be accessed by objects


***     MODIFIERS   ***

Modifiers are divied into two groups:
    Access Modifiers - controls the access level
    Non-Access Modifiers - do not control access level, but provides other functionality


        <---------- Access Modifier ---------->
#######     For classes, we can use either public or default :     #######
public : The class is accessible by any other class.
default : The class is only accessible by classes in the same package. 
            This is used when you don't specify a modifier.

#######  For attributes, methods and constructors, we can use the one of the following ::  ########
public : The code is accessible for all classes.
private : The code is only accessible within the declared class.
default : The code is only accessible in the same package. This is used when you don't specify a modifier.
protected : The code is accessible in the same package and subclasses.


        <--------- Non Access Modifier ----------->

For classes, Either use final or abstract
final : The class cannot be inherited by other classes.
abstract : The class cannot be used to create objects.
            (To access an abstract class, it must be inherited from another class)


For attributes and methods, One of the following can be used:

final :	Attributes and methods cannot be overridden/modified
static : Attributes and methods belongs to the class, rather than an object
abstract : Can only be used in an abstract class, and can only be used on methods. 
            The method does not have a body, for example abstract void run();.
            The body is provided by the subclass (inherited from).
transient :	Attributes and methods are skipped when serializing the object containing them
synchronized : Methods can only be accessed by one thread at a time
volatile : The value of an attribute is not cached thread-locally, and is always read from the "main memory".


***************        JAVA ENCAPSULATION           *****************

Privacy of data is maintained by decalering the variables as private and these 
private attributes are accessed through getters and setters methods.
    (((easy)))


***************         Java packages and API       *****************
import package.name.Class;   // Import a single class
import package.name.*;   // Import the whole package

***************         INHERITANCE             *****************

protected modifier is used in INHERITANCE a lot.
extends keyword is used to inherit a class.
Use final keyword to restrict the usage of a class to be inherited.

---------------         TYPES OF INHERITANCE        -----------------

Java supports three types of inheritance âˆ’

Single Level inheritance - A class inherits properties from a single class. For example, Class B inherits Class A.
Multilevel inheritance - A class inherits properties from a class which again has inherits properties
Hierarchical inheritance - Multiple classes inherits properties from a single class. For example,
                             Class B inherits Class A and Class C inherits Class A.


******************      POLYMORPHISM        **********************
            ---------   Many forms      -----------

*****************       InnerClass      ******************
                ------  Nested classes  -----

# Inner class can be given these modifiers : protected, static or private.
# One advantage of inner classes, is that they can access attributes and methods of the outer class.


********************     Abstraction         ************************   
Abstraction can be achieved with either abstract classes or interfaces

The abstract keyword is a non-access modifier, used for classes and methods:
# Abstract class: is a restricted class that cannot be used to create objects 
    (to access it, it must be inherited from another class).
# Abstract method: can only be used in an abstract class, and it does not have a body.
    The body is provided by the subclass (inherited from). 


*******************     Interface       ***********************

Interface methods are by default abstract and public.
Interface attributes are by default public, static and final.   
An interface cannot contain a constructor (as it cannot be used to create objects).

******************      Enums           ***********************

An enum can, just like a class, have attributes and methods. 
The only difference is that enum constants are public, 
static and final (unchangeable - cannot be overridden).

An enum cannot be used to create objects, and it cannot 
extend other classes (but it can implement interfaces).

The enum type has a values() method, which returns an array of all enum constants.

****************    ArrayList       *********************

The ArrayList class is a resizable array, which can be found in the java.util package.
## Methods available:
        .add(number);
        .add(index,number);
        .addAll(any collection here like another arrayList);
        .get(index);
        .remove(index);
        .remove(Integer.valueOf(number));
        .clear();
        .set(index,updated value);                  --- Used to update any element at specific index.
        .contains(number);                  --- Check if the number is present in the list or not 
                                                return true or false.
        .size();                        --- size of the arraylist(number of element present in list).

    *#  //toString method is invoked whenever we pass object to sout.
        //Every class has toString has method to print their objects easily.


****************        Stack           ********************
## Methods available:
        .push();
        .pop();
        .peek();                --- To view top element. 

****************        Queue           *********************
## Methods available:
        .offer(number)  -adds the value to tail of queue  ,     .add(number)    -throws an exception if task fails
        .poll()    -remove value from head   ,                  .remove()       -throws an exception if task fails
        .peek()    -returns the head of the queue    ,          .element()      -throws an exception if task fails

*****************	ArrayDeque		************************
## Methods available:
	.offer(number);	,	.offerFirst();	,	.offerLast();
	.poll();	,	.pollFirst();	,	.pollLast();
	.peek();	,	.peekFirst();	,	.peekLast();

*****************       set         *********************

Set which stores unique value and in sorted order we use TreeSet.
Use HashSet data structure for better optimized data manipulation.


*****************       MAP         *******************
ALSO SET , LIST AND QUEUE ARE USED TO STORE DATA IN DIFFERENT FASHION BUT 
MAPS USES KEY,VALUE PAIR METHOD TO STORE VALUES.

Map interface is implemented by these different classes:
        HashMap
        TreeMap
        EnumMap
        LinkedHashMap
        WeakHashMap